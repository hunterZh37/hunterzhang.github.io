---
import Heading from '@/components/Heading.astro';
import { Badge } from '@/components/ui/badge';
import { buttonVariants } from '@/components/ui/button';
import { Code, ExternalLink, Link as LinkIcon } from 'lucide-react';
import type { TranslatedProject } from '../type';
import type { IconType } from 'react-icons';
import { Github,  ScrollText, FileCode} from 'lucide-react';

import {
  SiReact,
  SiAngular,
  SiTypescript,
  SiAstro,
  SiTailwindcss,
  SiHtml5,
  SiCss3,
  SiJavascript,
  SiNodedotjs,
  SiBun,
  SiDeno,
  SiExpress,
  SiNestjs,
  SiHono,
  SiPython,
  SiPostgresql,
  SiMysql,
  SiMongodb,
  SiSqlite,
  SiPrisma,
  SiDrizzle,
  SiFigma,
  SiDocker,
  SiKubernetes,
  SiGit,
  SiNextdotjs,
  SiSupabase,
  SiRedis,
  SiFlask,
  SiFastapi,
  SiPostman,
  SiAmazon,
  SiPytorch,
  SiTensorflow,
  SiUnity,
  SiAdobeillustrator,
  SiAdobephotoshop,
  SiCanva,
  SiAdobepremierepro,
  SiRust,
} from 'react-icons/si';
export type Props = {
  project: TranslatedProject;
};

const { project } = Astro.props;
const techIconComponents: Record<string, IconType> = {
  nextjs: SiNextdotjs,
  react: SiReact,
  angular: SiAngular,
  typescript: SiTypescript,
  astro: SiAstro,
  tailwindcss: SiTailwindcss,
  html5: SiHtml5,
  css3: SiCss3,
  javascript: SiJavascript,
  nodejs: SiNodedotjs,
  bun: SiBun,
  deno: SiDeno,
  express: SiExpress,
  nestjs: SiNestjs,
  hono: SiHono,
  python: SiPython,
  postgresql: SiPostgresql,
  mysql: SiMysql,
  mongodb: SiMongodb,
  sqlite: SiSqlite,
  prisma: SiPrisma,
  drizzleorm: SiDrizzle,
  figma: SiFigma,
  docker: SiDocker,
  kubernetes: SiKubernetes,
  git: SiGit,
  amazonservices: SiAmazon,
  supabase: SiSupabase,
  redis: SiRedis,
  flask: SiFlask,
  fastapi: SiFastapi,
  postman: SiPostman,
  pytorch: SiPytorch,
  tensorflow: SiTensorflow,
  unity: SiUnity,
  illustrator: SiAdobeillustrator,
  photoshop: SiAdobephotoshop,
  canva: SiCanva,
  premierepro: SiAdobepremierepro,
  rust: SiRust,
};

const linkIconMap = {
  github: Github,
  documentation: ScrollText,
  paper: FileCode,
};

---



<div class="py-12 md:py-16">
  <article class="lg:prose-xl max-w-none dark:prose-invert">
    <a
      href={`/projects`}
      class={buttonVariants({ variant: 'ghost' }) + ' mb-6 no-underline'}
    >
      &larr; Back to Projects
    </a>

    <Heading
      title={project.title}
    />
    <div
      class="mb-2 flex flex-wrap items-center gap-x-4 gap-y-2 text-sm text-gray-600 dark:text-gray-900"
    >
      <!-- Category -->
      {
        project.tags && (
          <div class="flex items-center gap-2">
            {project.tags.map((tag) => (
              <Badge variant="default">{tag}</Badge>
            ))}
          </div>
        )
      }
      <!-- Date -->
      {
        project.dateText && (
          <div class="flex items-center gap-2">
            <span class="text-foreground">Date: </span>
            <span class="text-foreground">{project.dateText}</span>
          </div>
        )
      }
    </div>

    <!-- Video -->
    {
      project.videoUrl && (
        <div class="mb-0 overflow-hidden rounded-lg">
          <video
            src={project.videoUrl}
            controls
            class="h-[70%] w-[70%] object-cover"
            poster={project.imageUrl?.src ?? ''}
            autoplay
          >
            Your browser does not support the video tag.
          </video>
        </div>
      )
    }

    <!-- Description -->
    {
      project.detailedDescription && (
        <section class="mb-8">
          <h2>{'Description'}</h2>
          <p>{project.description}</p>
        </section>
      )
    }

    {
      project.keyFeaturesTranslated &&
        project.keyFeaturesTranslated.length > 0 && (
          <section class="mb-8">
            <h2>{'Contributions'}</h2>
            <ul class="list-disc">
              {project.contributions?.map((contribution) => (
                <li>
                  <p set:html={contribution} />
                </li>
              ))}
            </ul>
          </section>
        )
    }

    {
      (project.technologiesUsed || project.links) && (
        <div class="grid grid-cols-1 md:gap-8 md:grid-cols-2 md:mb-8 mb-4">
          {project.technologiesUsed && (
            <section>
              <h2 class="mt-0">
                {'Technologies Used'}
              </h2>
              <div class="flex flex-wrap gap-4">  
              {project.technologiesUsed?.map((tech) => {
            const TechIcon = techIconComponents[tech.id.toLowerCase()];
            return TechIcon ? (
              <TechIcon
                className="size-8 text-muted-foreground hover:text-primary transition-colors"
                title={tech.name}
              />
            ) : null;
          })}
          </div>
            </section>
          )}

          {project.links && (
            <section>
              <h2 class="mt-0">
                {'Links'}
              </h2>
              <div class="flex flex-wrap gap-4">
                {project.links?.map((link) => {
                  const Icon = linkIconMap[link.id.toLowerCase() as keyof typeof linkIconMap] || LinkIcon;
                  return (
                    
                      <a
                        href={link.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="flex items-center gap-2 text-primary hover:underline"
                      >
                        <Icon className="size-5" />
                        {link.label}
                      </a>
                    
                  );
                })}
              </div>
            </section>
          )}
        </div>
      )
    }

    {/* Project and Code URLs */}
    <!-- <div class="mt-8 flex flex-wrap gap-4">
      {
        project.projectUrl && (
          <a
            href={project.projectUrl}
            target="_blank"
            rel="noopener noreferrer"
            class={
              buttonVariants({ variant: 'default' }) + ' flex-1 no-underline'
            }
          >
            <ExternalLink className="mr-2 size-4" />
            {'visitProjectButton'}
          </a>
        )
      }
      {
        project.codeUrl && (
          <a
            href={project.codeUrl}
            target="_blank"
            rel="noopener noreferrer"
            class={
              buttonVariants({ variant: 'secondary' }) + ' flex-1 no-underline'
            }
          >
            <Code className="mr-2 size-4" />
            {'viewCodeButton'}
          </a>
        )
      }
    </div> -->
  </article>
</div>
