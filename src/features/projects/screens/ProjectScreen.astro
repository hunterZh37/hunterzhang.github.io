---
import Heading from '@/components/Heading.astro';
import { Badge } from '@/components/ui/badge';
import { buttonVariants } from '@/components/ui/button';
import { Image } from 'astro:assets';
import { Code, ExternalLink } from 'lucide-react';
import ProjectGallery from '../components/ProjectGallery';
import type { TranslatedProject } from '../type';

export type Props = {
  project: TranslatedProject;
};

const { project } = Astro.props;
---

<div class="py-12 md:py-16">
  <article class="prose lg:prose-xl max-w-none dark:prose-invert">
    <a
      href={`/projects`}
      class={buttonVariants({ variant: 'ghost' }) + ' mb-6 no-underline'}
    >
      &larr; {'backToProjects'}
    </a>

    <Heading title={project.title} />
    <div
      class="mb-4 flex flex-wrap items-center gap-x-4 gap-y-2 text-sm text-gray-600 dark:text-gray-400"
    >
      <!-- Category -->
      {
        project.categoryText && (
          <div class="flex items-center gap-2">
            <span class="text-foreground">
              {'categoryLabel'}
            </span>
            <Badge variant="secondary">{project.categoryText}</Badge>
          </div>
        )
      }
      <!-- Date -->
      {
        project.dateText && (
          <div class="flex items-center gap-2">
            <span class="text-foreground">
              {'dateLabel'}
            </span>
            <Badge variant="secondary">{project.dateText}</Badge>
          </div>
        )
      }
    </div>

    <!-- Image -->
    {
      project.imageUrl && (
        <div class="mb-8 aspect-[16/9] overflow-hidden rounded-lg shadow-lg">
          <Image
            src={project.imageUrl}
            alt={project.imageAltText}
            class="h-full w-full object-cover transition-transform duration-300 ease-in-out hover:scale-105"
            widths={[400, 800, 1200]}
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
          />
        </div>
      )
    }

    <!-- Detailed Description -->
    {
      project.detailedDescription && (
        <section class="mb-8">
          <h2>{'aboutTitle'}</h2>
          <p>{project.detailedDescription}</p>
        </section>
      )
    }

    {
      project.keyFeaturesTranslated &&
        project.keyFeaturesTranslated.length > 0 && (
          <section class="mb-8">
            <h2>{'keyFeaturesTitle'}</h2>
            <ul class="pl-5 list-disc">
              {project.keyFeaturesTranslated.map((feature) => (
                <li>
                  <strong>{feature.title}:</strong> {feature.description}
                </li>
              ))}
            </ul>
          </section>
        )
    }

    {/* Gallery */}

    {
      project.galleryImagesTranslated &&
        project.galleryImagesTranslated.length > 0 && (
          <ProjectGallery
            client:visible
            images={project.galleryImagesTranslated.map((image) => ({
              src: image.src.src,
              alt: image.alt,
              caption: image.caption,
              id: image.id,
            }))}
          />
        )
    }

    {
      (project.challenges || project.learnings) && (
        <div class="grid grid-cols-1 md:gap-8 md:grid-cols-2 md:mb-8 mb-4">
          {project.challenges && (
            <section>
              <h2 class="mt-0">
                {'challengesTitle'}
              </h2>
              <p>{project.challenges ?? 'Challenges'}</p>
            </section>
          )}

          {project.learnings && (
            <section>
              <h2 class="mt-0">
                {'learningsTitle'}
              </h2>
              <p>{project.learnings ?? 'Learnings'}</p>
            </section>
          )}
        </div>
      )
    }

    {/* Project and Code URLs */}
    <div class="mt-8 flex flex-wrap gap-4">
      {
        project.projectUrl && (
          <a
            href={project.projectUrl}
            target="_blank"
            rel="noopener noreferrer"
            class={
              buttonVariants({ variant: 'default' }) + ' flex-1 no-underline'
            }
          >
            <ExternalLink className="mr-2 size-4" />
            {'visitProjectButton'}
          </a>
        )
      }
      {
        project.codeUrl && (
          <a
            href={project.codeUrl}
            target="_blank"
            rel="noopener noreferrer"
            class={
              buttonVariants({ variant: 'secondary' }) + ' flex-1 no-underline'
            }
          >
            <Code className="mr-2 size-4" />
            {'viewCodeButton'}
          </a>
        )
      }
    </div>
  </article>
</div>
