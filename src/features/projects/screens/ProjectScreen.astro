---
import Heading from '@/components/Heading.astro';
import { Badge } from '@/components/ui/badge';
import { buttonVariants } from '@/components/ui/button';
import { Code, ExternalLink, Link as LinkIcon } from 'lucide-react';
import type { TranslatedProject } from '../type';
import type { IconType } from 'react-icons';
import { Github,  ScrollText, FileCode} from 'lucide-react';

import {
  SiReact,
  SiAngular,
  SiTypescript,
  SiAstro,
  SiTailwindcss,
  SiHtml5,
  SiCss3,
  SiJavascript,
  SiNodedotjs,
  SiBun,
  SiDeno,
  SiExpress,
  SiNestjs,
  SiHono,
  SiPython,
  SiPostgresql,
  SiMysql,
  SiMongodb,
  SiSqlite,
  SiPrisma,
  SiDrizzle,
  SiFigma,
  SiDocker,
  SiKubernetes,
  SiGit,
  SiNextdotjs,
  SiSupabase,
  SiRedis,
  SiFlask,
  SiFastapi,
  SiPostman,
  SiAmazon,
  SiPytorch,
  SiTensorflow,
  SiUnity,
  SiAdobeillustrator,
  SiAdobephotoshop,
  SiCanva,
  SiAdobepremierepro,
  SiRust,
} from 'react-icons/si';
export type Props = {
  project: TranslatedProject;
};

const { project } = Astro.props;
const techIconComponents: Record<string, IconType> = {
  nextjs: SiNextdotjs,
  react: SiReact,
  angular: SiAngular,
  typescript: SiTypescript,
  astro: SiAstro,
  tailwindcss: SiTailwindcss,
  html5: SiHtml5,
  css3: SiCss3,
  javascript: SiJavascript,
  nodejs: SiNodedotjs,
  bun: SiBun,
  deno: SiDeno,
  express: SiExpress,
  nestjs: SiNestjs,
  hono: SiHono,
  python: SiPython,
  postgresql: SiPostgresql,
  mysql: SiMysql,
  mongodb: SiMongodb,
  sqlite: SiSqlite,
  prisma: SiPrisma,
  drizzleorm: SiDrizzle,
  figma: SiFigma,
  docker: SiDocker,
  kubernetes: SiKubernetes,
  git: SiGit,
  amazonservices: SiAmazon,
  supabase: SiSupabase,
  redis: SiRedis,
  flask: SiFlask,
  fastapi: SiFastapi,
  postman: SiPostman,
  pytorch: SiPytorch,
  tensorflow: SiTensorflow,
  unity: SiUnity,
  illustrator: SiAdobeillustrator,
  photoshop: SiAdobephotoshop,
  canva: SiCanva,
  premierepro: SiAdobepremierepro,
  rust: SiRust,
};

const linkIconMap = {
  github: Github,
  documentation: ScrollText,
  paper: FileCode,
};

function getYouTubeEmbedUrl(url: string) {
  const videoId = url.match(/(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&\n?#]+)/)?.[1];
  return videoId ? `https://www.youtube.com/embed/${videoId}` : url;
}

---

<div class="py-6 md:py-12 lg:py-16 px-4 md:px-6 lg:px-8">
  <article>
    <a
      href={`/projects`}
      class={buttonVariants({ variant: 'ghost', size: 'sm' }) + ' mb-4 md:mb-6 no-underline text-xs sm:text-sm'}
    >
      &larr; Back to Projects
    </a>

    <Heading
      title={project.title}
      className="mb-4 md:mb-6"
    />
    
    <!-- Tags and Date -->
    <div class="mb-4 md:mb-6 flex flex-col sm:flex-row sm:flex-wrap sm:items-center gap-2 sm:gap-x-4 sm:gap-y-2 text-xs sm:text-sm text-gray-600 dark:text-gray-400">
      <!-- Category -->
      {
        project.tags && (
          <div class="flex items-center gap-2 flex-wrap">
            {project.tags.map((tag) => (
              <Badge variant="default" className="text-xs px-2 py-1">{tag}</Badge>
            ))}
          </div>
        )
      }
      <!-- Date -->
      {
        project.dateText && (
          <div class="flex items-center gap-2">
            <span class="text-foreground font-medium">Date:</span>
            <span class="text-foreground">{project.dateText}</span>
          </div>
        )
      }
    </div>

    <!-- Video -->
    {
      project.videoUrl && (
        <div class="mb-6 md:mb-8 aspect-video overflow-hidden rounded-lg shadow-lg">
          {project.videoUrl.includes('youtube') || project.videoUrl.includes('youtu.be') ? (
            <iframe
              src={getYouTubeEmbedUrl(project.videoUrl)}
              title="YouTube video"
              class="h-full w-full"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowfullscreen
            ></iframe>
          ) : (
            <video
              src={project.videoUrl}
              controls
              class="h-full w-full object-cover"
              poster={project.imageUrl?.src ?? ''}
              autoplay
            >
              Your browser does not support the video tag.
            </video>
          )}
        </div>
      )
    }

    <!-- Description -->
    {
      project.detailedDescription && (
        <section class="mb-6 md:mb-8">
          <h2 class="text-lg md:text-xl lg:text-2xl">Description</h2>
          <p class="text-sm md:text-base leading-relaxed">{project.description}</p>
        </section>
      )
    }

    <!-- Contributions -->
    {
      project.contributions &&
        project.contributions.length > 0 && (
          <section class="mb-6 md:mb-8">
            <h2 class="text-lg md:text-xl lg:text-2xl">Contributions</h2>
            <ul class="list-disc pl-4 md:pl-6 space-y-2">
              {project.contributions?.map((contribution) => (
                <li class="text-sm md:text-base leading-relaxed">
                  <div set:html={contribution} />
                </li>
              ))}
            </ul>
          </section>
        )
    }

    <!-- Technologies and Links -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 md:gap-8 mb-6 md:mb-8">
      {project.technologiesUsed && (
        <section>
          <h2 class="text-lg md:text-xl lg:text-2xl mt-0 mb-3 md:mb-4">
            Technologies Used
          </h2>
          <div class="flex flex-wrap gap-3 md:gap-4">  
            {project.technologiesUsed?.map((tech) => {
              const TechIcon = techIconComponents[tech.id.toLowerCase()];
              return TechIcon ? (
                <div class="flex flex-col items-center gap-1 group">
                  <TechIcon
                    className="size-6 md:size-8 text-muted-foreground hover:text-primary transition-colors"
                    title={tech.name}
                  />
                  <span class="text-xs text-muted-foreground group-hover:text-foreground transition-colors">
                    {tech.name}
                  </span>
                </div>
              ) : null;
            })}
          </div>
        </section>
      )}

      {project.links && (
        <section>
          <h2 class="text-lg md:text-xl lg:text-2xl mt-0 mb-3 md:mb-4">
            Links
          </h2>
          <div class="flex flex-col sm:flex-row sm:flex-wrap gap-3 md:gap-4">
            {project.links?.map((link) => {
              const Icon = linkIconMap[link.id.toLowerCase() as keyof typeof linkIconMap] || LinkIcon;
              return (
                <a
                  href={link.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="flex items-center gap-2 text-primary hover:underline text-sm md:text-base py-2 px-3 rounded-lg border border-border hover:bg-muted/50 transition-colors"
                >
                  <Icon className="size-4 md:size-5 flex-shrink-0" />
                  <span class="truncate">{link.label}</span>
                </a>
              );
            })}
          </div>
        </section>
      )}
    </div>
  </article>
</div>
