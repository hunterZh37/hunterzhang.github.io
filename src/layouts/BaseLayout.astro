---
import '../styles/global.css';
import Footer from '@/components/Footer.astro';
import Header from '@/components/Header.astro';
import { Home, Briefcase, FileText, Lightbulb, MessageSquare, Brain } from 'lucide-react';
import { ClientRouter } from 'astro:transitions';
import { Toaster } from 'sonner';

type Props = {
  pageTitle: string;
  pageDescription?: string;
};

export type NavItem = {
  href: string;
  label: string;
  icon: any;
};




const navItems: Array<NavItem> = [
  { href: '/', label: 'home', icon: Home },
  { href: '/projects', label: 'projects', icon: Briefcase },
  { href: '/experience', label: 'experience', icon: Brain },
  { href: '/blog', label: 'blogs', icon: FileText },
  { href: '/tips', label: 'interests', icon: Brain },
  { href: '/contact', label: 'contact', icon: MessageSquare },
];


---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta
      name="description"
      content="description"
    />

    <link
      rel="icon"
      type="image/png"
      href="/favicons/light-mode/favicon-96x96.png"
      sizes="96x96"
      media="(prefers-color-scheme: light)"
    />
    <link
      rel="icon"
      type="image/png"
      href="/favicons/dark-mode/favicon-96x96.png"
      sizes="96x96"
      media="(prefers-color-scheme: dark)"
    />
    <link
      rel="icon"
      type="image/svg+xml"
      href="/favicons/light-mode/favicon.svg"
      media="(prefers-color-scheme: light)"
    />
    <link
      rel="icon"
      type="image/svg+xml"
      href="/favicons/dark-mode/favicon.svg"
      media="(prefers-color-scheme: dark)"
    />

    <link
      rel="shortcut icon"
      href="/favicons/light-mode/favicon.ico"
      media="(prefers-color-scheme: light)"
    />
    <link
      rel="shortcut icon"
      href="/favicons/dark-mode/favicon.ico"
      media="(prefers-color-scheme: dark)"
    />

    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href="/favicons/light-mode/apple-touch-icon.png"
      media="(prefers-color-scheme: light)"
    />
    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href="/favicons/dark-mode/apple-touch-icon.png"
      media="(prefers-color-scheme: dark)"
    />

    <link
      rel="manifest"
      href="/favicons/light-mode/site.webmanifest"
      media="(prefers-color-scheme: light)"
    />
    <link
      rel="manifest"
      href="/favicons/dark-mode/site.webmanifest"
      media="(prefers-color-scheme: dark)"
    />

    <script is:inline>
      const getInitialTheme = () => {
        return 'dark';
      };
      const theme = getInitialTheme();
      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
      }
    </script>
    <title>{'title'}</title>

    {/* Font, for example Google Fonts - to adapt according to your choices */}
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <script
      src="https://cdn.jsdelivr.net/npm/mermaid@11.6.0/dist/mermaid.min.js"
      defer></script>
    <ClientRouter />
  </head>
  <body class="h-[100dvh] bg-background font-sans antialiased flex flex-col">
    {/* Tailwind classes for the body */}
    <header class="hidden md:block">
      <!-- passer aussi navItems mais sans le premier element dont le href === '/' -->
      <Header
        navItems={navItems.filter((item) => item.href !== '/') as NavItem[]}
      />
    </header>

    <main
      class="container mx-auto px-4 py-8 flex-1 max-w-screen-2xl pb-20 md:pb-8"
    >
      <slot />
    </main>
    <div class="hidden md:block">
      <Footer />
    </div>
    <Toaster position="bottom-right" richColors client:load />
    {/* Global scripts if needed, for example for analytics */}
    <script is:inline type="text/javascript">
      document.addEventListener('DOMContentLoaded', () => {
        const initializeAndRunMermaid = () => {
          if (typeof mermaid !== 'undefined') {

            let themeVars = {
              fontFamily: '"Inter", sans-serif',
              fontSize: '15px',
              // Base variables (light mode defaults)
              primaryColor: '#3B0764', // Node background
              primaryTextColor: '#F3F4F6', // Node text
              primaryBorderColor: '#A78BFA', // Node border
              lineColor: '#A78BFA', // Edge lines
              textColor: '#E5E7EB', // General text (like edge labels)
              edgeLabelBackground: '#4B3264', // Background for edge labels
              // Specific for sequence diagrams, etc. (can be expanded)
              actorBkg: '#3B0764',
              actorBorder: '#A78BFA',
              labelBoxBkgColor: '#2e104f', // Background for loop/alt/opt boxes
              labelTextColor: '#E5E7EB',
              noteBkgColor: '#2a0f4a',
              noteTextColor: '#E5E7EB',
              clusterBkg: '#240a3c',
              clusterBorder: '#7c3aed',
            };

            mermaid.initialize({
              startOnLoad: false, // We call run() manually
              theme: 'dark',
              themeVariables: themeVars,
            });

            mermaid.run({
              nodes: document.querySelectorAll('pre.mermaid'), // Correct selector for inline-svg strategy
            });
          } else {
            console.error('Mermaid object not found.');
          }
        };

        initializeAndRunMermaid(); // Initial run on page load

        document.addEventListener('astro:after-swap', () => {
          initializeAndRunMermaid(); // Re-initialize and run after page swaps for SPA-like navigation
        });
      });
    </script>
  </body>
</html>
